---
description: Coding rules for React, TypeScript and JavaScript
globs: *.tsx, *ts, *js, *jsx
---
# Web Development Coding Guidelines

## Development Philosophy
- Write clean, maintainable, and scalable code.
- Follow SOLID principles.
- Prefer functional and declarative programming patterns over imperative.
- Emphasize type safety and static analysis.
- Practice component-driven development.

---

## Code Style and Structure
- Write concise, modular TypeScript code with accurate examples.
- Prefer functional components over class components.
- Avoid code duplication; prioritize iteration and modularization.
- Use descriptive variable names with auxiliary verbs (e.g., `isLoading`, `hasError`).
- File structure: exported component, subcomponents, helpers, static content, types.
- Follow a consistent project structure.

---

## Naming Conventions
- **Directories & Files:** Use kebab-case (e.g., `components/auth-wizard`).
- **Components:** PascalCase (e.g., `UserProfile`).
- **Variables, Functions, Methods, Props:** camelCase (e.g., `fetchData`).
- **Boolean Variables:** Prefix with verbs (e.g., `isLoading`, `hasError`).
- **Event Handlers:** Prefix with `handle` (e.g., `handleClick`).
- **Custom Hooks:** Prefix with `use` (e.g., `useAuth`).
- **Constants & Environment Variables:** UPPER_CASE (e.g., `API_URL`).

---

## TypeScript Usage
- Use TypeScript for all code.
- Prefer interfaces over types.
- Avoid enums; use maps instead.
- Enable strict mode for better type safety.
- Use TypeScript utility types (`Partial`, `Pick`, `Omit`) for cleaner, reusable code.
- Apply generics where necessary.

---

## Syntax and Formatting
- Use single quotes (`'`) for strings.
- Use early returns to improve readability.
- Use `const` whenever possible.
- Omit semicolons unless required for disambiguation.
- Add space after keywords and before function parentheses.
- Always use strict equality (`===`).
- Use Prettier for consistent formatting.
- Keep line length under 80 characters.
- Use trailing commas in multiline object/array literals.

---

## UI and Styling
- Use **Tailwind CSS** for utility-based styling.
- Use **Shadcn UI** for accessible components.
- Use **Radix UI** primitives where necessary.
- Follow a mobile-first responsive design approach.
- Implement dark mode using CSS variables or Tailwind’s dark mode.
- Ensure high accessibility (a11y) standards using ARIA roles and semantic HTML.

---

## State Management
- Use `useState` for component-level state.
- Use `useReducer` for complex state logic.
- Use `useContext` for shared state.
- Use **Redux Toolkit** for global state management.
- Normalize state structure to avoid deep nesting.
- Use selectors to encapsulate state access.

---

## Performance Optimization
- Minimize the use of `useState` and `useEffect`.
- Use `useCallback` to memoize functions.
- Use `useMemo` for expensive calculations.
- Implement code splitting using dynamic imports.
- Avoid inline function definitions in JSX.

---

## Routing and Navigation (Next.js)
- Use Next.js **App Router** for routing.
- Use the **Link** component for client-side navigation.
- Use dynamic imports for better performance.
- Implement proper loading and error states.
- Use **next-i18next** for internationalization.

---

## Error Handling and Validation
- Use **Zod** for schema validation.
- Implement error boundaries for UI stability.
- Use Sentry for error logging and monitoring.
- Handle errors at the start of functions.
- Use early returns instead of deeply nested `if` statements.

---

## Testing
- Use Jest and React Testing Library for unit tests.
- Follow the Arrange-Act-Assert pattern.
- Mock external dependencies.
- Use snapshot testing selectively.
- Ensure full keyboard navigation support in accessibility tests.

---

## Security
- Sanitize user input to prevent XSS attacks.
- Use **DOMPurify** for HTML sanitization.
- Implement secure authentication methods.
- Ensure API communication is encrypted over HTTPS.

---

## Internationalization (i18n)
- Use **next-i18next** for handling translations.
- Implement locale detection and proper formatting for numbers and dates.
- Support RTL layouts where necessary.

---

## Documentation
- Use **JSDoc** for documenting functions and interfaces.
- Document public APIs and components.
- Include examples where applicable.
- Use markdown formatting for better readability.

---

## Final Notes
- Follow a **DRY** (Don’t Repeat Yourself) principle.
- Write code that is **readable and maintainable** over premature optimization.
- Avoid TODOs or placeholders in production code.
- Verify and test all functionality before deployment.

